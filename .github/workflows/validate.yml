name: "PR Validate Reusable"
on:
  workflow_call:
    inputs:
      pool-tag:
        required: true
        type: string
      package:
        required: false
        type: string

# env:
#   SFPOWERSCRIPTS_SPLUNK: "${{ vars.SPLUNK }}"
#   SFPOWERSCRIPTS_SPLUNK_API_KEY: "${{ secrets.SPLUNK_API_KEY }}"
#   SFPOWERSCRIPTS_SPLUNK_HOST: ${{ vars.SPLUNK_HOST}}

jobs:
  validate:
    name: "Validate Changed Packages"
    runs-on: ubuntu-latest
    container: ghcr.io/flxbl-io/sfp-rc:alpha

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "npm install"
        run: |
          npm install

      - name: "Authenticate Dev Hub"
        run: |
          echo "${{ secrets.DEVHUB_SFDX_AUTH_URL }}" > ./authfile
          sf auth sfdxurl store -f authfile -a devhub

      # Validate source and trigger test
      - name: "Push source to scratch org"
        run: "sfp orchestrator:validate -p ${{ inputs.pool-tag }} -v devhub -x --basebranch ${{ github.base_ref }}"

  static:
    name: "PMD Static Apex Code Analysis"
    runs-on: ubuntu-latest
    container: ghcr.io/dxatscale/sfpowerscripts
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Run PMD static code analysis"
        shell: bash
        run: |
          sf scanner run -p ./src --target "./**/**.cls" --outfile scanner-output.xml --format=junit

  # validate-package-coverage:
  #   name: 'Validate Unlocked Package Metadata Coverage'
  #   runs-on: ubuntu-latest
  #   container: ghcr.io/b64hub/dx-actions/sfdx-alpine:main
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0

  #     - name: "validate metadata coverage"
  #       shell: bash
  #       run: |
  #         sfdx sfpowerkit:package:valid -n ${{ inputs.package }} -b StandardValueSet
